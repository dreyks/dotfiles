[alias]
  # list all aliases
  aliases = !git config --get-regexp 'alias.*' | colrm 1 6 | sed 's/[ ]/ = /'

  # add
  a = add                           # add
  aa = add .                        # add all
  au = add -u .                     # only add changed

  # via http://blog.apiaxle.com/post/handy-git-tips-to-stop-you-getting-fired/
  snapshot = !git stash save "snapshot: $(date)" && git stash apply "stash@{0}"
  snapshots = !git stash list --grep snapshot

  # branch
  b = branch -v                     # branch (verbose)
  prune-gone = !git b -vv | grep gone | awk '{print $1}' | xargs -r git b -d # remove local orphan branches

  # commit
  c = commit -m                     # commit with message
  ca = commit -am                   # commit all with message
  ci = commit                       # commit
  amende = commit --amend           # amend your last commit
  amend = commit --amend --no-edit  # amend your last commit without editing commit message
  wip = !git add . && git commit -am 'wip' --no-verify # temporary commit with skipped pre-hooks
	fix = commit --fixup              # fixup to a specified commit
	fixr = !sh -c 'sha=$(git rev-parse $1) && git commit --fixup $sha && git rebase -i $sha~' - # fixup to a specified commit and immediately rebase

  # checkout
  co = checkout                     # checkout
  nb = checkout -b                  # create and switch to a new branch (mnemonic: "git new branch branchname...")
  cop = !sh -c 'git branch | (which fzf &> /dev/null && (fzf || :) || grep $1) | xargs -r git checkout' - # changes local branches on partial branch name match

  # cherry-pick
  cp = cherry-pick                  # grab a change from a branch

  # diff
  d = diff                          # diff unstaged changes
  dc = diff --cached                # diff staged changes

  # fetch
  fe = fetch -p --all               # feth from all remotes, remove local branches that where removed remotely

  # log
  l = log --graph --abbrev-commit
  changes = log --pretty=format:\"%h %cr %cn %Cgreen%s%Creset\" --name-status
  short = log --pretty=format:\"%h %cr %cn %Cgreen%s%Creset\"
  simple = log --pretty=format:\" * %s\"
  shortnocolor = log --pretty=format:\"%h %cr %cn %s\"

  # pull
  pl = pull --ff-only               # pull; do not try to merge, fail if fast-forward is not possible

  # push
  ps = push                         # push
  psf = push --force-with-lease
  psn = push -u origin HEAD         # push current branch to origin and set it as an upstream

  # rebase
  rb = rebase												# rebase
  rbi = rebase -i										# start interactive rebase
  rbc = rebase --continue           # continue interactive rebase

  # remote
  r = remote -v                     # show remotes (verbose)

  # status
  s = status -s                     # status

[core]
  excludesfile = ~/.gitignore
  editor = vi
  pager = less -FXR # use default flags for less even if $LESS env var is set

[color]
  ui = true

[diff]
  # Git diff will use (i)ndex, (w)ork tree, (c)ommit and (o)bject
  # instead of a/b/c/d as prefixes for patches
  mnemonicprefix = true
  algorithm = patience

[init]
	defaultBranch = master

[push]
  # 'git push' will push the current branch to its tracking branch
  # the usual default is to push all branches
  default = upstream

[rebase]
  # stashes all the changes befoe performing a rebase, then applies
  # it back after rebase is finished
  autostash = true
  # during an interactive rebase moves commits made with --fixup and --squash
  # to the corresponding targets
  autosquash = true

[user]
  name = Roman Usherenko
  email = roman.usherenko@gmail.com
